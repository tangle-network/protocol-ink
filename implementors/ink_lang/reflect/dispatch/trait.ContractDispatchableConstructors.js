(function() {var implementors = {};
implementors["governed_token_wrapper"] = [{"text":"impl ContractDispatchableConstructors&lt;/// The contract storage\n    #[ink(storage)]\n    #[derive(Default, SpreadAllocate, Storage)]\n    pub struct GovernedTokenWrapper {\n        #[storage_field]\n        psp22: psp22::Data,\n        #[storage_field]\n        metadata: metadata::Data,\n        #[storage_field]\n        wrapper: wrapper::Data,\n\n        /// The contract governor\n        governor: AccountId,\n        /// The address of the fee recipient\n        fee_recipient: AccountId,\n        /// The percentage fee for wrapping\n        fee_percentage: Balance,\n        /// To determine if native wrapping is allowed\n        is_native_allowed: bool,\n        /// The contract wrapping limit\n        wrapping_limit: Balance,\n        /// The nonce for adding/removing address\n        proposal_nonce: u32,\n        /// Map of token addresses\n        tokens: Mapping&lt;AccountId, bool&gt;,\n        /// Map of historical token addresses\n        historical_tokens: Mapping&lt;AccountId, bool&gt;,\n        /// Map of tokens that are valid\n        valid: Mapping&lt;AccountId, bool&gt;,\n        /// Map of tokens that are historically valid\n        historically_valid: Mapping&lt;AccountId, bool&gt;,\n    }&gt; for <a class=\"struct\" href=\"governed_token_wrapper/governed_token_wrapper/struct.GovernedTokenWrapper.html\" title=\"struct governed_token_wrapper::governed_token_wrapper::GovernedTokenWrapper\">GovernedTokenWrapper</a>","synthetic":false,"types":["governed_token_wrapper::governed_token_wrapper::GovernedTokenWrapper"]}];
implementors["mixer"] = [{"text":"impl ContractDispatchableConstructors&lt;#[derive(SpreadAllocate)]\n    pub struct Mixer {\n        deposit_size: Balance,\n        merkle_tree: merkle_tree::MerkleTree,\n        used_nullifiers: Mapping&lt;[u8; 32], bool&gt;,\n        poseidon: PoseidonRef,\n        verifier: MixerVerifierRef,\n    }&gt; for <a class=\"struct\" href=\"mixer/mixer/struct.Mixer.html\" title=\"struct mixer::mixer::Mixer\">Mixer</a>","synthetic":false,"types":["mixer::mixer::Mixer"]}];
implementors["mixer_verifier"] = [{"text":"impl ContractDispatchableConstructors&lt;#[derive(SpreadAllocate)]\n    pub struct MixerVerifier {\n        vk_bytes: Vec&lt;u8&gt;,\n    }&gt; for <a class=\"struct\" href=\"mixer_verifier/mixer_verifier/struct.MixerVerifier.html\" title=\"struct mixer_verifier::mixer_verifier::MixerVerifier\">MixerVerifier</a>","synthetic":false,"types":["mixer_verifier::mixer_verifier::MixerVerifier"]}];
implementors["poseidon"] = [{"text":"impl ContractDispatchableConstructors&lt;/// Defines the storage of your contract.\n    /// Add new fields to the below struct in order\n    /// to add new static storage fields to your contract.\n    #[ink(storage)]\n    #[derive(SpreadAllocate)]\n    pub struct Poseidon {\n        hasher_params_width_3_bytes: Vec&lt;u8&gt;,\n    }&gt; for <a class=\"struct\" href=\"poseidon/poseidon/struct.Poseidon.html\" title=\"struct poseidon::poseidon::Poseidon\">Poseidon</a>","synthetic":false,"types":["poseidon::poseidon::Poseidon"]}];
implementors["treasury"] = [{"text":"impl ContractDispatchableConstructors&lt;#[derive(SpreadAllocate, Storage)]\n    pub struct Treasury {\n        #[storage_field]\n        psp22: psp22::Data,\n        treasury_handler: AccountId,\n        proposal_nonce: u32,\n    }&gt; for <a class=\"struct\" href=\"treasury/struct.Treasury.html\" title=\"struct treasury::Treasury\">Treasury</a>","synthetic":false,"types":["treasury::treasury::Treasury"]}];
implementors["vanchor"] = [{"text":"impl ContractDispatchableConstructors&lt;#[derive(SpreadAllocate, Storage)]\n    pub struct VAnchor {\n        #[storage_field]\n        psp22: psp22::Data,\n\n        /// chain id\n        pub chain_id: u64,\n        /// ERC20 token address\n        pub creator: AccountId,\n        /// The merkle tree\n        pub merkle_tree: MerkleTree,\n        /// The linkable merkle tree\n        pub linkable_tree: LinkableMerkleTree,\n        /// ERC20 token wrapper address\n        pub tokenwrapper_addr: AccountId,\n        /// maximum deposit amount\n        pub max_deposit_amt: Balance,\n        /// minimum withdrawal amount\n        pub min_withdraw_amt: Balance,\n        /// maximum externalities amount\n        pub max_ext_amt: Balance,\n        /// maximum fee\n        pub max_fee: Balance,\n        pub handler: AccountId,\n        pub proposal_nonce: u64,\n\n        /// used nullifiers\n        pub used_nullifiers: Mapping&lt;[u8; 32], bool&gt;,\n\n        pub poseidon: PoseidonRef,\n        pub verifier_2_2: Vec&lt;u8&gt;,\n        pub verifier_16_2: Vec&lt;u8&gt;,\n        pub token_wrapper: GovernedTokenWrapperRef,\n    }&gt; for <a class=\"struct\" href=\"vanchor/vanchor/struct.VAnchor.html\" title=\"struct vanchor::vanchor::VAnchor\">VAnchor</a>","synthetic":false,"types":["vanchor::vanchor::VAnchor"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()